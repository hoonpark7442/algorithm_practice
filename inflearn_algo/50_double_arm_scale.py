# 섹션7. 깊이/넓이 우선 탐색(DFS, BFS) 활용
# 3. 양팔저울(DFS)

# 와우 어렵다...일단 S만큼 돌리고..흠...추 무게가 {1,5,7}이고 물의 무게가 2라고 하면.. {1,5,7,2} 요 중에서 합이 같은 부분집합 찾는 문제인건가..
# 1, 5 더해서 나머지랑 다르니 패스 1,7 더하고 나머지랑 비교하면 다르니 패스, 1,2 더하고 나머지 비교후 패스.
# 5, 7 더해서 나머지랑 다르니 패스 5,2 더하고 나머지랑 비교하면 엥...나머지랑 비교하면 안되겠네 일단 요소들이랑 비교부터하고 더해봐야 되는건가...

# 그런데... 추무게가 20만까지 있다.. 그럼 18만, 19만, 20만 짜리 추라면...57만번을 돌려야 되는데..?

# 문제풀이
# 일단 제일먼저 상태트리를 생각해 봐야 한다.
# 디게 어렵다. 일단 3개로 뻗어나간다. 레벨은 추의 개수만큼 나올것이다. 일단 3가닥 중 맨왼쪽은 저울의 왼쪽에 놓은것, 중간은 저울의 오른쪽에 추를 놓은 것. 오른쪽 놓는 경우는 -1을 한다.
# 맨 오른쪽 가닥은 추를 안놓는 케이스이다.
# 다시 말해 추를 왼쪽에 놓았단 것은 물을 오른쪽에 놓은것이고, 추를 오른쪽에 놓았단 것은 물을 왼쪽에 놓았단 것이다.
# 그런데..음수의 경우는 무조건 대칭의 상황이 나오니 음수면 패스..

def DFS(L, sum):
	global res
	if L==n:
		if 0 < sum <=s: # 음수는 볼 필요없는게 대칭구조가 무조건 만들어지므로.. 음수는 버려도됨
			res.add(sum)

	else:
		DFS(L+1, sum+G[L])
		DFS(L+1, sum-G[L])
		DFS(L+1, sum)


n=int(input())
G=list(map(int, input().split()))
s=sum(G)
res=set()
DFS(0,0)
print(s-len(res))